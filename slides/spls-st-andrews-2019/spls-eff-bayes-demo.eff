(********************************************
  Eff-Bayes: modular implementations 
                  of 
     approximate Bayesian inference 
                 with 
           effect handlers 

          work in progress
 
    Oliver Goldstein, ____Ohad Kammar____, 
      Žiga Lukšič, Matija Pretnar, 
                  and 
             Adam Ścibior

    Scottish Programming Languages Seminar
          University of St. Andrews
                 13 March 
                                            *)
(********************************************
         2nd International Summer School on
               Metaprogramming


                Schloss Dagstuhl

        Leibniz Center for Informatics
                    Germany

             11th-16th August 2019
            (the week before ICFP'19)



https://www.cl.cam.ac.uk/events/metaprog/2019/

                                            *)
(********************************************)
(*
  

   With thanks to Oleg Kiselyov

     who has been teaching us these
    
       techniques for many years

         http://okmij.org/ftp/kakuritu/






                                            *)
(********************************************)
(**   Goal: Bayesian Statistical Modelling 
     Input data: x   y
                 1   1.1
                 2   1.9
                 3   2.7
     `Bayesian homogenous linear regression'

     regression: measure/distribution
                 over functions f : R -> R

     homogeneous linear:
                 assume f(x) = a*x

     Bayesian:   start off with a prior
                 distribution over R -> R, 
                 e.g.: a ~ Normal(0, 2)
                                            *)
(********************************************)
(*               Eff basics                 *)
(* Floating point constants:                *)
let pi = 4.0 *. atan 1.0

(* Box-Muller transform:                    *)
let box_muller u1 u2 = 
  sqrt(-2.0 *. log u1) *. cos(2.0*. pi *.u2)

  

  






(********************************************)
(*               Eff basics (ctd)           *)
(* Non-negative reals represented 
   as logarithms *)
type rplus = Exp of float

(* Coercions                                *)
let rplus_of_float x =  Exp (log x)

let rplus_of_int a   =
  rplus_of_float(float_of_int a)

let float_of_rplus (Exp x) = exp x
 
let ( *.. ) (Exp x) (Exp y) = Exp (x +. y)
let ( /.. ) (Exp x) (Exp y) = Exp (x -. y)
let ( <=. ) (Exp x) (Exp y) = x <= y
let square x = x *. x
(********************************************)
(* More numerics                            *)
let ( +.. ) =
  let log_plus x y
    = ( x +. log1p (exp (y -. x))) in
  fun (Exp x) (Exp y) ->
    if (x < y)
    then Exp (log_plus y x)
    else Exp (log_plus x y)

(* More glue                               *)
let repeat : int -> (int -> unit) -> unit
  = fun max f ->
    let rec loop i =
      if i < max
      then (f i; loop (i + 1))
      else ()
    in loop 0
(********************************************)
(* plotting with built-in effects           *)
let plot : (float -> float) -> string
           -> unit (*! Write *)
  = fun f filename ->
  let lft = 0.0
  and rgt = 4.0 in
  let stp = (rgt -. lft)/.1000.0 in
  let rec loop current = if current < rgt
    then (perform (Write
                     ("data/"^filename
                     ,to_string current
                      ^ " " ^
                      to_string (f current)
                      ^ "\n"));
          loop (current +. stp))
    else ()
  in loop lft
(********************************************)

let example_plot ()
  = plot (fun x -> 2.0 *. x) "plot.dat"






      







(********************************************)
(*  User-defined effects and handlers       *)
effect Sample : float
effect Score  : rplus -> unit

let sample () = perform (Sample ())
let score   r = perform (Score   r)
           
let random_sampler :
      'a (*! Sample        *)
   => 'a (*! RandomFloat   *)
  = handler
  | effect Sample k ->
     continue k (perform (RandomFloat 1.))
  | v -> v


       
(********************************************)
(* Example:
   Use Box-Muller to get a normal distribution: *)
let standard_normal  (* Normal(0, 1) *)
    : unit -> float (* ! Sample *)
  = fun _ -> box_muller (sample ())
                        (sample ())

let normal mean sdv =
  mean +. standard_normal () *. sdv 







(********************************************)
(*         Statistical modelling            *)
type 'a model = unit
                -> 'a (* ! Sample, Score *)

type regression = (float -> float) model
                
let homogeneous_linear : regression
  = fun _ ->
      let a = normal 0.0 2.0 in
      fun x -> a *. x

let plot_reg () = repeat 100 (fun i ->
        let f = with random_sampler
                handle homogeneous_linear ()
        in plot f
             ("prior_regression_"
              ^ (to_string i) ^".dat"))
(********************************************)
let normal_pdf mean sdv x =
  rplus_of_float(
      (exp(-.((square (x-.mean))
              /.(2.0*. (square sdv)))))
      /. (sdv *. sqrt(2.0*.pi)))



let fitted : regression = fun () ->
  let f = (let a = normal 0.0 2.0 
          in fun x -> a*. x)
  in score (normal_pdf (f 1.0) 0.25 1.1);
     score (normal_pdf (f 2.0) 0.25 1.9);
     score (normal_pdf (f 3.0) 0.25 2.7);
     f

     
(********************************************)
(* More generally                           *)
type data = (float*float) list
let  dataset = [(1.0, 1.1)
               ;(2.0, 1.9)
               ;(3.0, 2.7)]

let fit : regression -> data -> regression
  = fun model dataset () ->
  let f = model () in
  map (fun (x,y) ->
      score (normal_pdf (f x) 0.25 y)
    ) dataset;
  f

let fitted = fit homogeneous_linear dataset


(********************************************)
(*Handling conditioning: collecting weights *)

let weighted : 'a (*! Score, e*)
               => rplus * 'a  (*! e*)
  = handler 
  | effect (Score w) k ->
     (fun w' -> continue k () (w' *.. w))
  | v -> (fun w -> (w,v))
  | finally prog -> prog (Exp 0.)








(********************************************)
let plot_weighted_fitted ()
  = repeat 15 (fun i ->
        let (Exp w, f) = 
          with random_sampler handle
          with weighted       handle
               fitted ()
        in
        perform
          (Print (to_string (exp w) ^ "\n"));
        plot f
             ("silly_regression_"
              ^ (to_string i) ^".dat")
      )



  
(********************************************)
(* importance sampling                      *)
type 'a list_dist = (rplus * 'a) list 
                      
let populate
      (k : int)
      (model : 'a model (*! Score, Sample, e*))
    : 'a list_dist (*! Sample, e *) =
  let rec loop i acc =
    if i < k
    then let result =
         with weighted handle 
            score (Exp 0. /.. rplus_of_int k)
           ;model () 
         in loop (i + 1) (result :: acc)
    else acc
  in loop 0 []
(********************************************)
(*  importance sampling    (ctd)            *)
let sum_weights (list_dist : 'a list_dist)
    : rplus = 
  fold_left
    (fun acc (w, x) -> acc +.. w)
    (rplus_of_int 0)
    list_dist

let normalise (pop : 'a list_dist)
    : 'a list_dist =
  let total = sum_weights pop in
  map (fun (r,x) -> (r /.. total), x) pop



  

(********************************************)
let weighted_choice
      (list_dist : 'a list_dist)
    : 'a (*! Sample *)
  = 
  (*ASSUME list_dist is NON-EMPTY *)
  let total_w = sum_weights list_dist in
  let total_fuel = (float_of_rplus total_w)
                   *. (sample ()) in
  let rec choose fuel ((w, x) :: wxs) =
    let fuel = fuel -. float_of_rplus w in
    if fuel <= 0. then x else choose fuel wxs
  in
  choose total_fuel list_dist


  

(********************************************)
let plot_population histogram name 
  =
  let irrelevant = (*try 'negligible' thanks giorgio*)
    filter (fun (Exp w, _) -> exp w < 0.00001)
      histogram
    |> length
  in
  perform (Print (to_string irrelevant ^ "\n"));
  repeat 15 (fun i ->
      let f = with random_sampler
              handle weighted_choice histogram
      in plot f
           (name ^ "_regression_"
            ^ (to_string i) ^".dat"))

  
(********************************************)
(*  importance sampling    (ctd)            *)
let (|>) x f = f x


let importance_sampling () =
  let particle_count = 1000 in
  let histogram  = 
    (with random_sampler
     handle  populate particle_count fitted)
    |> normalise 
  
  in (*     plot it              *)  
  plot_population histogram "importance"




(********************************************)
(* resampling:                              *)

let resample (list_dist : 'a list_dist)
    : 'a list_dist (*! Sample *)
  =
  let n = length list_dist in
  let total_w = sum_weights list_dist in
  let resample_model : 'a model = fun () -> (
      score total_w;
      weighted_choice list_dist )
  in
  populate n resample_model 



  

(********************************************)
type 'a thunk = unit -> 'a

let yield_on_score : 'a =>
                       'a thunk
  = handler
  | effect (Score w) k ->
     (score w; fun () -> (k ()) ())
  | v -> fun () -> v








                 
(********************************************)
                 
let advance (thunk_list : 'a thunk list_dist) 
    : 'a thunk list_dist (* ! Sample *) =
  let poke (w, t) =
  with weighted handle
         (score w ; with yield_on_score handle t ())
  in
  map poke thunk_list

let finalize (thunk_list : 'a thunk list_dist)
    : 'a list_dist (* ! Sample *) =
  let poke (w, t) =
  with weighted handle
         (score w; t ())
  in
  map poke thunk_list
(********************************************)
let smc ()
  = with random_sampler handle
    let particle_count = 100
    and steps     = 4 in
    let pop = populate particle_count
            (fun () ->
             with yield_on_score
                    handle fitted ())
    in
    let rec loop i pop =
      if i < steps then
        pop |> resample |> advance |> loop (i + 1)
      else
        finalize pop 
    in let histogram = (loop 0 pop) in
       plot_population histogram "smc"
(********************************************)
(*
  Summary:

   + With enough glue, 
      <<insert your language>>
     can support:
        probabilistic programming
        statistical modelling
        statistical machine learning

   + Work in progress!  
     TODO: Trace MCMC ---> rmsmc, smc^2,...
   
   + (Attempted) simplification of 
           monad-bayes
       (this, but with monads)   
   + TODO: correctness via reasoning in MEGA
*********************************************)
         
